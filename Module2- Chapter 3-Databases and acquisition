Module 2- Chapter 3: Databases and Acquisition
There are two main categories of databases namely:
•	Relational Databases
•	Non-relational databases

	Relational and non-relational databases are two broad categories that differ significantly in their structure, data storage, querying mechanisms, and use cases.

Relational Databases:

•	Structure: Relational databases organize data into tables, where each table consists of rows and columns. Each row represents a record, and each column represents a specific attribute or field of the data.
•	Data Storage: Data in relational databases follows a predefined schema, which means the structure of the data is fixed and enforced by the database schema.
•	Querying Mechanism: They typically use SQL (Structured Query Language) for querying and manipulating data. SQL allows for complex queries, joins, and transactions.
•	ACID Properties: Relational databases generally adhere to ACID (Atomicity, Consistency, Isolation, Durability) properties, ensuring data integrity and reliability.
•	Examples: MySQL, PostgreSQL, Oracle Database, SQL Server.


Non-Relational Databases (NoSQL):

•	Structure: Non-relational databases come in various forms such as key-value stores, document stores, column-family stores, and graph databases. They don't necessarily follow the tabular structure of relational databases.
•	Data Storage: Non-relational databases are schema-less or have a flexible schema, allowing for storage of semi-structured or unstructured data. This flexibility makes them well-suited for handling large volumes of rapidly changing data.
•	Querying Mechanism: While some NoSQL databases support SQL-like query languages, many use APIs tailored to specific data models. For instance, document databases use document-oriented query languages, graph databases use graph query languages, etc.
•	CAP Theorem: NoSQL databases are often designed with trade-offs based on the CAP theorem (Consistency, Availability, Partition tolerance), which states that it's impossible for a distributed data store to simultaneously provide all three guarantees.
•	Examples: MongoDB (document store), Cassandra (column-family store), Redis (key-value store), Neo4j (graph database).

Key Differences:
•	Data Structure: Relational databases use a tabular structure, whereas non-relational databases offer various data models like key-value, document, column-family, or graph.
•	
•	Schema: Relational databases have a fixed schema, while non-relational databases are schema-less or have a flexible schema.
•	
•	Query Language: Relational databases primarily use SQL, while non-relational databases often use specialized query languages or APIs tailored to their data model.
•	
•	Scalability: Non-relational databases are often more scalable and better suited for handling large volumes of data or distributed systems due to their flexible schema and eventual consistency models.

Choosing between relational and non-relational databases depends on various factors including the nature of the data, scalability requirements, consistency needs, and the specific use case of the application.







Relational Model
	The relational model, proposed by Edgar F. Codd in 1970, forms the basis for relational databases. Here are some key points about the relational model:
	The relational model builds on the concept of tabular data. In the relational model, an entity contains data for a single subject. 
	When creating an IT system, you need to consider all the entities required to make your system work. 
	You can think of entities as nouns because they usually correspond to people, places, and things.
	
•	Tabular Structure: Data in a relational database is organized into tables, also known as relations. Each table consists of rows (tuples) and columns (attributes). Rows represent individual records, while columns represent attributes or properties of those records.
•	Primary Key: Each table in the relational model has a primary key, which uniquely identifies each row in the table. This ensures that each record in the table is distinct and identifiable.
•	Foreign Key: Tables in a relational database can be related to each other through foreign keys. A foreign key in one table refers to the primary key in another table, establishing a relationship between the two tables.
•	Normalization: The relational model supports the concept of normalization, which involves organizing the database structure to minimize redundancy and dependency. This helps maintain data integrity and reduces the risk of anomalies during data manipulation.
•	Normalization is a process of structuring database in way that it minimizes data duplication.
•	SQL: The Structured Query Language (SQL) is the standard language for managing and querying relational databases. SQL provides a comprehensive set of commands for tasks such as data retrieval, insertion, deletion, and modification.
•	ACID Properties: Relational databases adhere to the ACID properties (Atomicity, Consistency, Isolation, Durability) to ensure data integrity and reliability, particularly in transactional scenarios.
•	Structured Querying: Users interact with relational databases by writing SQL queries to retrieve, update, or manipulate data. SQL queries can be simple or complex, involving various operations like joins, aggregations, and subqueries.
•	Data Integrity Constraints: Relational databases support various constraints such as primary key constraints, foreign key constraints, unique constraints, and check constraints to enforce data integrity rules at the database level.
Overall, the relational model provides a powerful and flexible framework for organizing and managing structured data. It has been widely adopted in various applications and industries due to its simplicity, effectiveness, and adherence to fundamental principles of data management.
ERDs
	An Entity-Relationship Diagram (ERD) is a visual representation of the data model that shows the relationships among different entities in a database. 
	ERDs are commonly used during the design phase of a database to illustrate the logical structure of the system. 
	Here are the key components of an ERD:

•	Entities: Entities represent the real-world objects or concepts about which data is stored in the database. They are typically nouns, such as "Customer," "Product," "Order," etc. Each entity is depicted as a rectangle in the ERD.
•	Attributes: Attributes describe the properties or characteristics of an entity. They are represented within the entity rectangle. For example, a "Customer" entity might have attributes such as "CustomerID," "Name," "Email," etc.
•	Relationships: Relationships define how entities are related to each other. They are depicted as lines connecting two entities and typically have a verb phrase label describing the nature of the relationship. For instance, a "Customer" entity may be related to an "Order" entity with a "places" relationship.
•	Cardinality: Cardinality describes the numerical relationship between entities in a relationship. It specifies how many instances of one entity are related to a single instance of another entity. Common cardinality notations include "1:1" (one-to-one), "1:N" (one-to-many), and "N:M" (many-to-many).
•	Primary Key: Primary keys uniquely identify each instance of an entity. In an ERD, primary keys are often underlined or otherwise indicated to distinguish them from regular attributes.
•	Foreign Key: Foreign keys are attributes in one entity that refer to the primary key of another entity. They establish relationships between entities. In an ERD, foreign keys are represented as lines connecting attributes.
	When creating an ERD, designers typically follow a step-by-step process that involves identifying entities and their attributes, defining relationships between entities, determining cardinality, and refining the model based on business requirements.
	ERDs are crucial for database design as they provide a clear and concise.



Cardinality and Relationships

	In an Entity-Relationship Diagram (ERD), relationships between entities can be represented in various combinations, depending on the nature of the relationship and the cardinality between entities. 
	Here are some common types of relationships and their representations in ERDs:

One-to-One (1:1) Relationship:
•	Representation: In this relationship, each instance of one entity is related to exactly one instance of another entity, and vice versa.
•	Diagram Representation: Represented by a single line connecting the two entities, often labeled with "1:1" or "1..1" on both ends.
One-to-Many (1:N) Relationship:
•	Representation: In this relationship, each instance of one entity is related to zero or more instances of another entity, but each instance of the related entity is related to exactly one instance of the first entity.
•	Diagram Representation: Represented by a line with a crow's foot (three lines) or a single line with a short perpendicular line on the many sides. It's often labeled with "1:N" or "1.." on the one side and "" or "N" on the many side.
Many-to-One (N:1) Relationship:
•	Representation: This relationship is the reverse of one-to-many, where each instance of one entity can be related to multiple instances of another entity, but each instance of the related entity is related to exactly one instance of the first entity.
•	Diagram Representation: Similar to one-to-many but reversed, often labeled with "*" or "N" on the one side and "1" or "1..1" on the many side.
Many-to-Many (N:M) Relationship:
•	Representation: In this relationship, each instance of one entity can be related to multiple instances of another entity, and vice versa.
•	Diagram Representation: Represented by a line connecting the two entities with crow's feet (three lines) on both ends, often labeled with "*" or "N" on both sides.

Recursive Relationship:
•	Representation: In a recursive relationship, an entity is related to itself.
•	Diagram Representation: Represented by a line connecting the entity to itself, often labeled with the appropriate cardinality.
Unary Relationship:
•	Representation: In a unary relationship, an entity is related to itself in a different role or context.
•	Diagram Representation: Like recursive relationship representation, but with different labels to indicate the different roles or contexts.

These representations help database designers and developers understand the structure and cardinality of relationships within the database, facilitating efficient data modeling and database design.
 









Database Schema
	A database schema is a blueprint or structure that defines the logical organization and layout of a database. 
	It represents the arrangement of data elements and the relationships among them. 
	Essentially, it outlines the database's structure, including tables, fields, relationships, constraints, and other attributes.

Here are the key components of a database schema:

•	Tables: A database schema consists of one or more tables, each representing a specific entity or concept. Tables are organized into rows (also known as tuples or records) and columns (also known as attributes or fields).
•	Columns: Columns define the attributes or properties of the data stored in a table. Each column has a data type that specifies the kind of data it can hold (e.g., integer, string, date, etc.).
•	Primary Keys: Primary keys uniquely identify each record (row) within a table. They enforce the entity's uniqueness constraint and ensure that each row is identifiable.
•	Foreign Keys: Foreign keys establish relationships between tables by linking the primary key of one table to a column in another table. They represent the references from one table to another and enforce referential integrity.
•	Constraints: Constraints define rules or conditions that must be satisfied for data integrity and consistency. Common constraints include unique constraints (ensuring uniqueness of values in a column), not null constraints (requiring a column to have a value), and check constraints (validating data against specified conditions).
•	Indexes: Indexes are optional structures that improve the performance of data retrieval operations by providing fast access to rows based on the indexed columns. They are used to speed up queries and enforce uniqueness constraints.
•	Views: Views are virtual tables generated from the data stored in one or more tables. They present a customized representation of the data and can simplify complex queries by encapsulating logic and joining multiple tables.
Database schemas are typically created and managed using Data Definition Language (DDL) statements in database management systems (DBMS). DDL statements allow users to define, modify, and delete database objects such as tables, indexes, and constraints. 
Properly designing and maintaining a database schema is essential for ensuring data consistency, integrity, and efficiency in database operations.

How is the database schema different from ERD?
	The database schema and the Entity-Relationship Diagram (ERD) serve different purposes and represent different aspects of a database.

Database Schema:
•	Purpose: The database schema defines the logical structure and organization of the database. It specifies the tables, columns, data types, constraints, indexes, relationships, and other attributes necessary to store and manage data.
•	Representation: The database schema is typically represented using Data Definition Language (DDL) statements in the database management system (DBMS). It provides a detailed description of the database's structure and attributes.
•	Focus: The focus of the database schema is on the internal structure of the database, including the tables, columns, and relationships between them.
•	Usage: Database administrators and developers use the database schema to design, create, modify, and maintain the database. It serves as a blueprint for implementing the database in the DBMS.
Entity-Relationship Diagram (ERD):
•	Purpose: The ERD illustrates the logical relationships between entities (tables) in the database. It provides a visual representation of the data model, showing how different entities are related to each other.
•	Representation: The ERD is a graphical representation consisting of entities (rectangles), attributes (ovals), relationships (lines), and cardinality indicators. It shows the structure and relationships of entities in a clear and understandable manner.
•	Focus: The focus of the ERD is on the conceptual or logical model of the database, emphasizing the entities, attributes, and relationships between them. It abstracts away implementation details such as data types and constraints.
•	Usage: Database designers and developers use ERDs during the database design phase to conceptualize the database structure, identify entities and relationships, and communicate the design to stakeholders. It helps in understanding the data model and planning the database schema.

	In summary, the database schema defines the internal structure and organization of the database, whereas the ERD illustrates the logical relationships between entities in the database. While the database schema focuses on implementation details and is represented using DDL statements, the ERD focuses on the conceptual model and is represented graphically to aid in understanding and communication.


Non-relational databases
Examples of Non- relational databases:
	Key -values
	Document
	Column-family
	Graphs

Key-value Databases.
A key-value database is a type of NoSQL database that stores data as a collection of key-value pairs. In this database model, each data item (value) is associated with a unique identifier called a key. Key-value databases are designed for simplicity, scalability, and high performance in scenarios where rapid read and write operations are required.

Here are some key characteristics of key-value databases:

•	Simplicity: Key-value databases have a simple data model, where each key maps to a single value. This simplicity makes them easy to understand, use, and scale.
•	Flexibility: Key-value databases are schema-less, meaning that each key-value pair can have its own structure and data type. This flexibility allows for storing a wide variety of data types and structures within the same database.
•	High Performance: Key-value databases are optimized for fast read and write operations. They typically offer low-latency access to data, making them suitable for use cases requiring real-time data processing and high-throughput workloads.
•	Scalability: Many key-value databases are designed to scale horizontally across multiple nodes in a distributed cluster. This allows them to handle large volumes of data and support high concurrency and throughput requirements.
•	Use Cases: Key-value databases are commonly used in scenarios such as caching, session management, user profiles, real-time analytics, and content delivery networks (CDNs). They are also used as building blocks for more complex data models in combination with other NoSQL databases.
Examples of key-value databases include:
•	Redis: Redis is an in-memory data store that supports various data structures such as strings, lists, sets, and hashes. It is commonly used as a caching layer, message broker, and real-time analytics platform.
•	Amazon DynamoDB: DynamoDB is a fully managed key-value and document database service provided by Amazon Web Services (AWS). It offers seamless scalability, low latency, and high availability, making it suitable for a wide range of use cases.
•	Apache Cassandra: While Cassandra is primarily known as a wide-column store database, it also supports a key-value data model through its use of the CQL (Cassandra Query Language) interface. It offers distributed, scalable, and highly available storage for key-value pairs.
Overall, key-value databases provide a simple yet powerful approach to storing and accessing data, making them well-suited for various applications requiring high performance, scalability, and flexibility.

Document Database
	A document database is a type of NoSQL database that stores and retrieves data in a flexible, semi-structured format known as documents. 
	Each document is a self-contained data structure composed of key-value pairs or key-array pairs, where values can be simple data types (strings, numbers) or complex data structures (arrays, nested documents).

Here are some key characteristics of document databases:

•	Document Model: Document databases organize data into collections, where each collection contains multiple documents. Each document within a collection can have a different structure, allowing for flexibility in data representation.
•	JSON/BSON Format: Documents are typically stored in a format that is human-readable and easy to work with, such as JSON (JavaScript Object Notation) or BSON (Binary JSON). This format allows for nested data structures, arrays, and complex data types.
•	Schema Flexibility: Document databases are schema-less or have a flexible schema, meaning that there are no strict requirements for the structure of documents within a collection. This flexibility makes it easy to adapt to evolving data requirements without requiring schema migrations.
•	Querying: Document databases provide powerful querying capabilities that allow for searching, filtering, and aggregating data within documents and collections. Many document databases support query languages or APIs that are specifically designed for working with JSON-like data structures.
•	Scalability: Document databases are designed to scale horizontally across multiple nodes in a distributed cluster. This allows them to handle large volumes of data and support high throughput and concurrency requirements.
•	Use Cases: Document databases are well-suited for a wide range of use cases, including content management systems, e-commerce platforms, real-time analytics, user profiles, and product catalogs. They are particularly useful in scenarios where data is semi-structured or has varying attributes across different entities.
Examples of document databases include:
•	MongoDB: MongoDB is one of the most popular document databases, known for its scalability, flexibility, and ease of use. It stores data in BSON format and provides a rich set of features for querying, indexing, and managing documents.
•	Couchbase: Couchbase is a distributed document database that offers high performance, availability, and scalability. It supports both JSON and binary document formats and is commonly used in applications requiring low-latency access to data.
•	Amazon DocumentDB (with MongoDB compatibility): Amazon DocumentDB is a fully managed document database service provided by AWS. It is compatible with MongoDB and offers the scalability, availability, and security features of AWS.

Document databases provide a flexible and scalable solution for managing semi-structured data, making them a popular choice for modern applications with dynamic data requirements.


Column-Family Databases
	A column-family database is a type of NoSQL database that organizes and stores data in columns rather than rows. 
	It is designed to efficiently manage large volumes of structured or semi-structured data and is particularly well-suited for use cases that require high scalability and fast read and write operations.

Here are some key characteristics of column-family databases:

•	Column-Oriented Storage: Unlike traditional relational databases, which store data in rows, column-family databases store data in columns. Each column family consists of rows, each containing multiple columns. This column-oriented storage allows for efficient retrieval of specific columns or subsets of columns, making it suitable for analytical and read-heavy workloads.
•	Schema Flexibility: Column-family databases typically have a flexible schema, allowing each row to have a different set of columns. This schema-less design makes it easy to adapt to changing data requirements without requiring schema migrations.
•	Scalability: Column-family databases are designed to scale horizontally across multiple nodes in a distributed cluster. They partition data into column families and distribute them across nodes, allowing for linear scalability and high availability.
•	High Performance: Column-family databases are optimized for read and write operations, especially for large-scale analytics and data warehousing applications. They use techniques such as columnar storage, compression, and indexing to achieve high performance and low latency.
•	Wide-Column Store: Column-family databases are sometimes referred to as wide-column stores because they support columns with different data types and allow for the storage of large numbers of columns per row. This flexibility makes them suitable for use cases with varying data structures and access patterns.
•	Querying: Column-family databases provide query languages or APIs that allow for querying and filtering data based on column values. While they may not support complex joins or transactions like relational databases, they excel at analytical queries and data aggregation.



Examples of column-family databases include:

•	Apache Cassandra: Apache Cassandra is a highly scalable, distributed column-family database designed for handling large volumes of data across multiple nodes. It offers high availability, fault tolerance, and linear scalability, making it suitable for use cases such as real-time analytics, time-series data, and IoT applications.
•	Apache HBase: Apache HBase is an open-source, distributed column-family database built on top of Apache Hadoop. It provides real-time read and write access to large datasets and is commonly used for use cases such as big data analytics, machine learning, and time-series data analysis.
•	ScyllaDB: ScyllaDB is a highly performant, distributed column-family database compatible with Apache Cassandra. It is designed for low-latency, high-throughput workloads and is often used in applications requiring real-time data processing and analytics.

	Column-family databases offer a scalable and efficient solution for storing and querying large volumes of structured or semi-structured data, making them a popular choice for modern, data-intensive applications.

Graph Databases
	Graph databases are a type of NoSQL database designed specifically for representing and storing data in the form of graphs.
	 In a graph database, data is modeled as nodes (vertices) and edges (relationships) between those nodes. 
	This data model is particularly well-suited for representing complex relationships and interconnected data structures.

Here are some key characteristics of graph databases:
•	Graph Data Model: In a graph database, data is represented as a collection of nodes and edges, where nodes represent entities (such as people, products, or locations) and edges represent relationships between those entities. Both nodes and edges can have properties that provide additional information about them.

•	Relationships: Relationships in graph databases are first-class citizens, meaning they are as important as the nodes themselves. Relationships can have properties, directionality, and types, allowing for rich and expressive modeling of data relationships.
•	Schema Flexibility: Graph databases typically have a flexible schema, allowing for dynamic addition and modification of nodes, edges, and properties without requiring a predefined schema. This flexibility makes them well-suited for evolving data requirements and agile development processes.
•	Traversals and Queries: Graph databases provide powerful traversal and query capabilities for navigating and analyzing the graph structure. Users can perform complex graph traversals, pattern matching, and graph algorithms to discover insights, identify patterns, and answer complex questions.
•	Performance: Graph databases are optimized for efficiently querying and traversing graph structures, even at scale. They use index-free adjacency and other optimizations to achieve fast query performance, making them suitable for real-time and interactive applications.
•	Use Cases: Graph databases excel in scenarios where relationships between data entities are as important as the entities themselves. Common use cases include social networks, recommendation engines, fraud detection, network and IT operations, knowledge graphs, and impact analysis.
Examples of graph databases include:
•	Neo4j: Neo4j is a popular graph database known for its scalability, performance, and rich querying capabilities. It provides a native graph storage engine and a Cypher query language tailored for graph traversal and pattern matching.
•	Amazon Neptune: Amazon Neptune is a fully managed graph database service provided by Amazon Web Services (AWS). It supports both property graph and RDF graph models and is compatible with popular graph query languages such as Gremlin and SPARQL.
•	ArangoDB: ArangoDB is a multi-model database that supports document, key-value, and graph data models. It provides a native graph storage engine and a query language called AQL (ArangoDB Query Language) for querying and manipulating graph data.

	Graph databases offer a flexible and expressive data model for representing complex relationships and interconnected data structures, making them a powerful tool for building intelligent and data-driven applications.

